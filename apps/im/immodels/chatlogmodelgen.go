// Code generated by goctl. DO NOT EDIT!
package immodels

import (
	"context"
	"go.mongodb.org/mongo-driver/mongo/options"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type chatLogModel interface {
	Insert(ctx context.Context, data *ChatLog) error
	FindOne(ctx context.Context, id string) (*ChatLog, error)
	ListBySendTime(ctx context.Context, conversationId string, startSendTime, endSendTime, limit int64) ([]*ChatLog, error)
	ListByMsgIds(ctx context.Context, msgIds []string) ([]*ChatLog, error)
	UpdateMarkRead(ctx context.Context, id primitive.ObjectID, readRecords []byte) error
	Update(ctx context.Context, data *ChatLog) error
	Delete(ctx context.Context, id string) error
}

type defaultChatLogModel struct {
	conn *mon.Model
}

func newDefaultChatLogModel(conn *mon.Model) *defaultChatLogModel {
	return &defaultChatLogModel{conn: conn}
}

func (m *defaultChatLogModel) Insert(ctx context.Context, data *ChatLog) error {
	/*if !data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}*/

	_, err := m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultChatLogModel) FindOne(ctx context.Context, id string) (*ChatLog, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data ChatLog

	err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


// ListByMsgIds 根据消息ID列表查询聊天日志。
// 该方法首先将消息ID转换为MongoDB所需的ObjectID格式，然后查询数据库中匹配这些ID的所有聊天日志。
// 如果查询成功，返回聊天日志列表；如果查询时出现ErrNotFound错误，返回ErrNotFound；如果出现其他错误，返回该错误。
// 参数:
//   ctx: 上下文，用于取消操作和传递请求范围的值。
//   msgIds: 消息ID列表，用于查询对应的聊天日志。
// 返回值:
//   []*ChatLog: 符合指定消息ID列表的聊天日志列表。
//   error: 如果查询过程中发生错误，返回该错误。
func (m *defaultChatLogModel) ListByMsgIds(ctx context.Context, msgIds []string) ([]*ChatLog, error) {
    // 初始化一个空的ChatLog切片，用于存储查询结果。
    var data []*ChatLog
    // 初始化一个空的ObjectID切片，用于存储转换后的消息ID。
    var ids = make([]primitive.ObjectID, 0, len(msgIds))
    // 遍历消息ID列表，将每个ID转换为MongoDB所需的ObjectID格式。
    for _, id := range msgIds {
        oid, err := primitive.ObjectIDFromHex(id)
        // 如果转换过程中发生错误，返回ErrInvalidObjectId。
        if err != nil {
            return nil, ErrInvalidObjectId
        }
        // 将转换后的ID添加到ids切片中。
        ids = append(ids, oid)
    }
    // 构建查询过滤器，匹配_ids字段在ids切片中的文档。
    filter := bson.M{
        "_id":bson.M{
            "$in": ids,
        },
    }
    // 执行查询操作。
    err := m.conn.Find(ctx, &data, filter)
    switch err {
    case nil:
        return data, nil
    case mon.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

// UpdateMarkRead 更新聊天记录的阅读状态。
// 该方法通过提供的聊天记录ID，更新数据库中的聊天记录，设置其readRecords字段为指定的值。
// 参数:
//   ctx: 上下文，用于取消操作并传递请求范围的值。
//   id: 要更新的聊天记录的唯一标识符。
//   readRecords: 更新后的阅读记录信息。
// 返回值:
//   如果更新操作失败，返回错误信息；否则返回nil。
func (m *defaultChatLogModel) UpdateMarkRead(ctx context.Context, id primitive.ObjectID, readRecords []byte) error {
    // 更新数据
    _, err := m.conn.UpdateOne(ctx, bson.M{"_id": id}, bson.M{
        "$set": bson.M{
            "readRecords": readRecords,
        },
    })
    // 返回错误信息
    return err
}


func (m *defaultChatLogModel) Update(ctx context.Context, data *ChatLog) error {
	data.UpdateAt = time.Now()

	_, err := m.conn.ReplaceOne(ctx, bson.M{"_id": data.ID}, data)
	return err
}

func (m *defaultChatLogModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	_, err = m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}

// 查询聊天记录
func (m *defaultChatLogModel) ListBySendTime(ctx context.Context,
	conversationId string, startSendTime, endSendTime, limit int64) ([]*ChatLog, error) {
	// 存放查找的消息结果
	var data []*ChatLog
	// 查询前先进行排序，用的是mongo组件的方法；同时定义Limit的值默认100，表示一页显示多少
	opt := options.FindOptions{
		Limit: &DefaultChatLogLimit,
		Sort: bson.M{
			"sendTime": -1,
		},
	}
	// 形参符合要求的话，就按照形参的设置限制数目
	if limit > 0 {
		opt.Limit = &limit
	}
	// 相当于mysql里面的where条件
	filter := bson.M{
		"conversationId": conversationId,
	}
	// where指定时间范围
	if endSendTime > 0 {
		filter["sendTime"] = bson.M{
			"$gt":  endSendTime,
			"$lte": startSendTime,
		}
	} else {
		filter["sendTime"] = bson.M{
			"$lt": startSendTime,
		}
	}
	// 范围规定好之后，最后查询数据
	err := m.conn.Find(ctx, &data, filter, &opt)
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
