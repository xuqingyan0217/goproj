---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: "mysql:5.7"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-password
                  key: password
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb
            - mountPath: /var/lib/mysql
              name: mysql-data
      volumes:
        - name: initdb
          hostPath:
            path: /gomall/db/sql/ini
            type: DirectoryOrCreate
        - name: mysql-data
          hostPath:
            path: /gomall/components/mysql/data
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
spec:
  type: NodePort
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
      nodePort: 30006

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etcd
spec:
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
        - name: etcd
          image: "etcd:v3.5.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: ETCD_ENABLE_V2
              value: "true"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://192.168.10.16:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_NAME
              value: "etcd"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 2379
            - containerPort: 2380
---
apiVersion: v1
kind: Service
metadata:
  name: etcd-svc
spec:
  type: NodePort
  selector:
    app: etcd
  ports:
    - port: 2379
      targetPort: 2379
      nodePort: 30237
      name: "2379"
    - port: 2380
      targetPort: 2380
      nodePort: 30238
      name: "2380"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
spec:
  selector:
    matchLabels:
      app: consul
  template:
    metadata:
      labels:
        app: consul
    spec:
      containers:
        - name: consul
          image: "consul:1.8.8"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 8500
---
apiVersion: v1
kind: Service
metadata:
  name: consul-svc
spec:
  type: NodePort
  selector:
    app: consul
  ports:
    - port: 8500
      targetPort: 8500
      nodePort: 30850

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: "redis:7.2.5"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 6379
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: redis-data
      volumes:
        - name: redis-data
          hostPath:
            path: /gomall/components/redis/data
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  type: NodePort
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
      nodePort: 30637

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
spec:
  selector:
    matchLabels:
      app: nats
  template:
    metadata:
      labels:
        app: nats
    spec:
      containers:
        - name: nats
          image: "nats:2.10.19"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 4222
            - containerPort: 8222
---
apiVersion: v1
kind: Service
metadata:
  name: nats-svc
spec:
  type: NodePort
  selector:
    app: nats
  ports:
    - port: 4222
      targetPort: 4222
      nodePort: 30422
      name: "4222"
    - port: 8222
      targetPort: 8222
      nodePort: 30822
      name: "8222"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
spec:
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
        - name: jaeger
          image: "jaegertracing/all-in-one:1.62.0"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 16686
            - containerPort: 4317
            - containerPort: 4318
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-svc
spec:
  type: NodePort
  selector:
    app: jaeger
  ports:
    - port: 16686
      targetPort: 16686
      nodePort: 31668
      name: "16686"
    - port: 4317
      targetPort: 4317
      nodePort: 30431
      name: "4317"
    - port: 4318
      targetPort: 4318
      nodePort: 30432
      name: "4318"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: "prometheus:v2.34.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 9090
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prom-config
            - mountPath: /etc/prometheus/alert_rules.yml
              name: prom-alertmanager-rules
            - mountPath: /prometheus
              name: prom-data
      volumes:
        - name: prom-config
          hostPath:
            path: /gomall/components/prometheus/config/prometheus.yml
            type: File
        - name: prom-alertmanager-rules
          hostPath:
            path: /gomall/components/prometheus/config/alert_rules.yml
            type: File
        - name: prom-data
          hostPath:
            path: /gomall/components/prometheus/data
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30909
      name: "9090"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: "grafana:8.3.3"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 3000
            - containerPort: 10007
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-config
            - mountPath: /etc/grafana/provisioning/datasources/datasource.yaml
              name: grafana-datasource
      volumes:
        - name: grafana-config
          hostPath:
            path: /gomall/components/grafana/data
            type: DirectoryOrCreate
        - name: grafana-datasource
          hostPath:
            path: /gomall/components/grafana/config/datasource.yaml
            type: File
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30300
      name: "3000"
    - port: 10007
      targetPort: 10007
      nodePort: 31007
      name: "10007"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
spec:
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: "grafana/loki:2.9.2"
          imagePullPolicy: IfNotPresent
          args:
            - "--config.file=/etc/loki/local-config.yaml"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 3100
            - containerPort: 9096
          volumeMounts:
            - mountPath: /etc/loki/local-config.yaml
              name: loki-config
            - mountPath: /tmp/loki
              name: loki-data
      volumes:
        - name: loki-config
          hostPath:
            path: /gomall/components/loki/config/loki.yml
            type: File
        - name: loki-data
          hostPath:
            path: /gomall/components/loki/data
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: loki-svc
spec:
  type: NodePort
  selector:
    app: loki
  ports:
    - port: 3100
      targetPort: 3100
      nodePort: 30310
      name: "3100"
    - port: 9096
      targetPort: 9096
      nodePort: 30906
      name: "9096"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
        - name: promtail
          image: "grafana/promtail:2.9.2"
          imagePullPolicy: IfNotPresent
          args:
            - "--config.file=/etc/promtail/promtail.yaml"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          volumeMounts:
            - mountPath: /etc/promtail/promtail.yaml
              name: promtail-config
            - mountPath: /logs/
              name: promtail-logs
      volumes:
        - name: promtail-config
          hostPath:
            path: /gomall/components/promtail/config/promtail.yml
            type: File
        - name: promtail-logs
          hostPath:
            path: /home/logs/
            type: DirectoryOrCreate

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox
spec:
  selector:
    matchLabels:
      app: blackbox
  template:
    metadata:
      labels:
        app: blackbox
    spec:
      containers:
        - name: blackbox
          image: "blackbox:latest"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 9115
---
apiVersion: v1
kind: Service
metadata:
  name: blackbox-svc
spec:
  type: ClusterIP
  selector:
    app: blackbox
  ports:
    - port: 9115
      targetPort: 9115
      name: "9115"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
spec:
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
        - name: alertmanager
          image: "alertmanager:latest"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - containerPort: 9093
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-svc
spec:
  type: NodePort
  selector:
    app: alertmanager
  ports:
    - port: 9093
      targetPort: 9093
      nodePort: 30081
      name: "9093"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-password
type: Opaque
data:
  password: cm9vdA==