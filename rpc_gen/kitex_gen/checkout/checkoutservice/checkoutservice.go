// Code generated by Kitex v0.9.1. DO NOT EDIT.

package checkoutservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	checkout "gomall/rpc_gen/kitex_gen/checkout"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Checkout": kitex.NewMethodInfo(
		checkoutHandler,
		newCheckoutArgs,
		newCheckoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PreCheckout": kitex.NewMethodInfo(
		preCheckoutHandler,
		newPreCheckoutArgs,
		newPreCheckoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ContinueCheckout": kitex.NewMethodInfo(
		continueCheckoutHandler,
		newContinueCheckoutArgs,
		newContinueCheckoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	checkoutServiceServiceInfo                = NewServiceInfo()
	checkoutServiceServiceInfoForClient       = NewServiceInfoForClient()
	checkoutServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return checkoutServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return checkoutServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return checkoutServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CheckoutService"
	handlerType := (*checkout.CheckoutService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "checkout",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func checkoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(checkout.CheckoutReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(checkout.CheckoutService).Checkout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckoutArgs:
		success, err := handler.(checkout.CheckoutService).Checkout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckoutArgs() interface{} {
	return &CheckoutArgs{}
}

func newCheckoutResult() interface{} {
	return &CheckoutResult{}
}

type CheckoutArgs struct {
	Req *checkout.CheckoutReq
}

func (p *CheckoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(checkout.CheckoutReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckoutArgs) Unmarshal(in []byte) error {
	msg := new(checkout.CheckoutReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckoutArgs_Req_DEFAULT *checkout.CheckoutReq

func (p *CheckoutArgs) GetReq() *checkout.CheckoutReq {
	if !p.IsSetReq() {
		return CheckoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckoutResult struct {
	Success *checkout.CheckoutResp
}

var CheckoutResult_Success_DEFAULT *checkout.CheckoutResp

func (p *CheckoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(checkout.CheckoutResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckoutResult) Unmarshal(in []byte) error {
	msg := new(checkout.CheckoutResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckoutResult) GetSuccess() *checkout.CheckoutResp {
	if !p.IsSetSuccess() {
		return CheckoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*checkout.CheckoutResp)
}

func (p *CheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutResult) GetResult() interface{} {
	return p.Success
}

func preCheckoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(checkout.PreCheckoutReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(checkout.CheckoutService).PreCheckout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PreCheckoutArgs:
		success, err := handler.(checkout.CheckoutService).PreCheckout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PreCheckoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPreCheckoutArgs() interface{} {
	return &PreCheckoutArgs{}
}

func newPreCheckoutResult() interface{} {
	return &PreCheckoutResult{}
}

type PreCheckoutArgs struct {
	Req *checkout.PreCheckoutReq
}

func (p *PreCheckoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(checkout.PreCheckoutReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PreCheckoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PreCheckoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PreCheckoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PreCheckoutArgs) Unmarshal(in []byte) error {
	msg := new(checkout.PreCheckoutReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PreCheckoutArgs_Req_DEFAULT *checkout.PreCheckoutReq

func (p *PreCheckoutArgs) GetReq() *checkout.PreCheckoutReq {
	if !p.IsSetReq() {
		return PreCheckoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PreCheckoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PreCheckoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PreCheckoutResult struct {
	Success *checkout.PreCheckoutResp
}

var PreCheckoutResult_Success_DEFAULT *checkout.PreCheckoutResp

func (p *PreCheckoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(checkout.PreCheckoutResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PreCheckoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PreCheckoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PreCheckoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PreCheckoutResult) Unmarshal(in []byte) error {
	msg := new(checkout.PreCheckoutResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PreCheckoutResult) GetSuccess() *checkout.PreCheckoutResp {
	if !p.IsSetSuccess() {
		return PreCheckoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PreCheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*checkout.PreCheckoutResp)
}

func (p *PreCheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PreCheckoutResult) GetResult() interface{} {
	return p.Success
}

func continueCheckoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(checkout.ContinueCheckoutReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(checkout.CheckoutService).ContinueCheckout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ContinueCheckoutArgs:
		success, err := handler.(checkout.CheckoutService).ContinueCheckout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ContinueCheckoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newContinueCheckoutArgs() interface{} {
	return &ContinueCheckoutArgs{}
}

func newContinueCheckoutResult() interface{} {
	return &ContinueCheckoutResult{}
}

type ContinueCheckoutArgs struct {
	Req *checkout.ContinueCheckoutReq
}

func (p *ContinueCheckoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(checkout.ContinueCheckoutReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ContinueCheckoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ContinueCheckoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ContinueCheckoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ContinueCheckoutArgs) Unmarshal(in []byte) error {
	msg := new(checkout.ContinueCheckoutReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ContinueCheckoutArgs_Req_DEFAULT *checkout.ContinueCheckoutReq

func (p *ContinueCheckoutArgs) GetReq() *checkout.ContinueCheckoutReq {
	if !p.IsSetReq() {
		return ContinueCheckoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ContinueCheckoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContinueCheckoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ContinueCheckoutResult struct {
	Success *checkout.ContinueCheckoutResp
}

var ContinueCheckoutResult_Success_DEFAULT *checkout.ContinueCheckoutResp

func (p *ContinueCheckoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(checkout.ContinueCheckoutResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ContinueCheckoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ContinueCheckoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ContinueCheckoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ContinueCheckoutResult) Unmarshal(in []byte) error {
	msg := new(checkout.ContinueCheckoutResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ContinueCheckoutResult) GetSuccess() *checkout.ContinueCheckoutResp {
	if !p.IsSetSuccess() {
		return ContinueCheckoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ContinueCheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*checkout.ContinueCheckoutResp)
}

func (p *ContinueCheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContinueCheckoutResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Checkout(ctx context.Context, Req *checkout.CheckoutReq) (r *checkout.CheckoutResp, err error) {
	var _args CheckoutArgs
	_args.Req = Req
	var _result CheckoutResult
	if err = p.c.Call(ctx, "Checkout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PreCheckout(ctx context.Context, Req *checkout.PreCheckoutReq) (r *checkout.PreCheckoutResp, err error) {
	var _args PreCheckoutArgs
	_args.Req = Req
	var _result PreCheckoutResult
	if err = p.c.Call(ctx, "PreCheckout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ContinueCheckout(ctx context.Context, Req *checkout.ContinueCheckoutReq) (r *checkout.ContinueCheckoutResp, err error) {
	var _args ContinueCheckoutArgs
	_args.Req = Req
	var _result ContinueCheckoutResult
	if err = p.c.Call(ctx, "ContinueCheckout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
