// Code generated by Kitex v0.9.1. DO NOT EDIT.

package aieinoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	AIEino "gomall/rpc_gen/kitex_gen/AIEino"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AIWithOrders": kitex.NewMethodInfo(
		aIWithOrdersHandler,
		newAIWithOrdersArgs,
		newAIWithOrdersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AIWithPreCheckout": kitex.NewMethodInfo(
		aIWithPreCheckoutHandler,
		newAIWithPreCheckoutArgs,
		newAIWithPreCheckoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	aIEinoServiceServiceInfo                = NewServiceInfo()
	aIEinoServiceServiceInfoForClient       = NewServiceInfoForClient()
	aIEinoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return aIEinoServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return aIEinoServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return aIEinoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AIEinoService"
	handlerType := (*AIEino.AIEinoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "AIEino",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func aIWithOrdersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(AIEino.AIWithOrdersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(AIEino.AIEinoService).AIWithOrders(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AIWithOrdersArgs:
		success, err := handler.(AIEino.AIEinoService).AIWithOrders(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AIWithOrdersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAIWithOrdersArgs() interface{} {
	return &AIWithOrdersArgs{}
}

func newAIWithOrdersResult() interface{} {
	return &AIWithOrdersResult{}
}

type AIWithOrdersArgs struct {
	Req *AIEino.AIWithOrdersReq
}

func (p *AIWithOrdersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(AIEino.AIWithOrdersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AIWithOrdersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AIWithOrdersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AIWithOrdersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AIWithOrdersArgs) Unmarshal(in []byte) error {
	msg := new(AIEino.AIWithOrdersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AIWithOrdersArgs_Req_DEFAULT *AIEino.AIWithOrdersReq

func (p *AIWithOrdersArgs) GetReq() *AIEino.AIWithOrdersReq {
	if !p.IsSetReq() {
		return AIWithOrdersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AIWithOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIWithOrdersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AIWithOrdersResult struct {
	Success *AIEino.AIWithOrdersResp
}

var AIWithOrdersResult_Success_DEFAULT *AIEino.AIWithOrdersResp

func (p *AIWithOrdersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(AIEino.AIWithOrdersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AIWithOrdersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AIWithOrdersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AIWithOrdersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AIWithOrdersResult) Unmarshal(in []byte) error {
	msg := new(AIEino.AIWithOrdersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AIWithOrdersResult) GetSuccess() *AIEino.AIWithOrdersResp {
	if !p.IsSetSuccess() {
		return AIWithOrdersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AIWithOrdersResult) SetSuccess(x interface{}) {
	p.Success = x.(*AIEino.AIWithOrdersResp)
}

func (p *AIWithOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIWithOrdersResult) GetResult() interface{} {
	return p.Success
}

func aIWithPreCheckoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(AIEino.AIWithPreCheckoutReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(AIEino.AIEinoService).AIWithPreCheckout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AIWithPreCheckoutArgs:
		success, err := handler.(AIEino.AIEinoService).AIWithPreCheckout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AIWithPreCheckoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAIWithPreCheckoutArgs() interface{} {
	return &AIWithPreCheckoutArgs{}
}

func newAIWithPreCheckoutResult() interface{} {
	return &AIWithPreCheckoutResult{}
}

type AIWithPreCheckoutArgs struct {
	Req *AIEino.AIWithPreCheckoutReq
}

func (p *AIWithPreCheckoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(AIEino.AIWithPreCheckoutReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AIWithPreCheckoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AIWithPreCheckoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AIWithPreCheckoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AIWithPreCheckoutArgs) Unmarshal(in []byte) error {
	msg := new(AIEino.AIWithPreCheckoutReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AIWithPreCheckoutArgs_Req_DEFAULT *AIEino.AIWithPreCheckoutReq

func (p *AIWithPreCheckoutArgs) GetReq() *AIEino.AIWithPreCheckoutReq {
	if !p.IsSetReq() {
		return AIWithPreCheckoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AIWithPreCheckoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AIWithPreCheckoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AIWithPreCheckoutResult struct {
	Success *AIEino.AIWithPreCheckoutResp
}

var AIWithPreCheckoutResult_Success_DEFAULT *AIEino.AIWithPreCheckoutResp

func (p *AIWithPreCheckoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(AIEino.AIWithPreCheckoutResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AIWithPreCheckoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AIWithPreCheckoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AIWithPreCheckoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AIWithPreCheckoutResult) Unmarshal(in []byte) error {
	msg := new(AIEino.AIWithPreCheckoutResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AIWithPreCheckoutResult) GetSuccess() *AIEino.AIWithPreCheckoutResp {
	if !p.IsSetSuccess() {
		return AIWithPreCheckoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AIWithPreCheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*AIEino.AIWithPreCheckoutResp)
}

func (p *AIWithPreCheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AIWithPreCheckoutResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AIWithOrders(ctx context.Context, Req *AIEino.AIWithOrdersReq) (r *AIEino.AIWithOrdersResp, err error) {
	var _args AIWithOrdersArgs
	_args.Req = Req
	var _result AIWithOrdersResult
	if err = p.c.Call(ctx, "AIWithOrders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AIWithPreCheckout(ctx context.Context, Req *AIEino.AIWithPreCheckoutReq) (r *AIEino.AIWithPreCheckoutResp, err error) {
	var _args AIWithPreCheckoutArgs
	_args.Req = Req
	var _result AIWithPreCheckoutResult
	if err = p.c.Call(ctx, "AIWithPreCheckout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
